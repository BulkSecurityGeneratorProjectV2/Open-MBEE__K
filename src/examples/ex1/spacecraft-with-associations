
Rahul,

Concerning SysML, I think one main possible addition to make is to allow the user
to write relations between classes, although we do already support it in some sense.

From a SysML point of view, let's say we want to model the following diagram:

--------------                         ------------
| SpaceCraft | spacecraft  instrument  |Instrument|
|            |------------------------>|          |
|            | [0,1]            [1,10] |          |
--------------                         ------------

The constraint [0,1] can also be expressed with a black diamon, here noted with
<:>,

--------------                         ------------
| SpaceCraft | spacecraft  instrument  |Instrument|
|            |<:>--------------------->|          |
|            |                  [1,10] |          |
--------------                         ------------

I am not sure whether the arrow head --> has a meaning that is crucial.
Well, it means that the relation can be navigated from a spacecraft. So perhaps
it puts a constraint on how this model can be traversed in OCL expressions.

Now, how can we express this in K? I see two main approaches, which I think the SysML
community is split according to:

1. using properties: here we define the relation inside the SpaceCrraft class,
   like we define val and var. This is the case in EMF: which is Eclipe's implementat
   ion of UML ...

2. using a special conept of relation "boxes", that are just like classes but
   they represent relations.

Or both ...

Let's look at them, one by one.

--------------------
1. Using properties:
--------------------

Here again there are two solutions:

1.a) we use the notation we already have: sets, lists and maps
1.b) we introduce a new notation for these relations expressed as properties

1.a) Using notation we already have: sets, lists and maps:
----------------------------------------------------------

Right now, as K is, we can get close:

class SpaceCraft {
  val instruments : {Instrument}
}

That is: instruments is a set of Instruments.

What we have *not* expressed here:
(i)   that the set instruments should have at least one element and at most 10.
(ii)  that for each instrument there is at most one spacecraft it is associated with
(iii) how to get from an instrument back to the spacecraft it is associated with

We could get closer, taking care of (i), by expressing instuments using a 
predicate subtype, which K has:

class SpaceCraft {
  val instruments : {| set : {Instrument} . 1 <= size(set) && size(set) <= 10 |}
}

The notation gets too heavy though if this is the kind of constraint SysML write
often.

We can also just use constraints:

class SpaceCraft {
  val instruments : {Instrument}

  req {
    1 <= size(instruments) && size(instruments) <= 10
  }
}

Still heavy - from a traditional SysML point of view.

1.b) Using a new notation
-------------------------

We could play with set/list and map types with additional size constraints,
as in:

class SpaceCraft {
  val instruments : {Instrument} size (1,10) 
}

Or, we can introduce a completely new memberDeclaration introducing a relation
as a property:

class SpaceCraft {
  rel instrument : Instrument[1,10] back spacecraft[0,1] 
}

Note the 'back' keyword telling us how we get back from an instrument to
the spacecraft.

None of this is ideal.


-------------------
1. Using relations:
-------------------

I think Chris Delp wants this. In this case, one would write something like:

class SpaceCraft { ... }

class Instrument { ... }

assoc Attachment {
  role spaceCraft : SpaceCraft
  role instrument : Instrument
}

An assoc can for example allow the same kind of member declarations as 
a class but in addition alow these role definitions.

Something to think about. I can skype in case we find this useful.

Klaus
