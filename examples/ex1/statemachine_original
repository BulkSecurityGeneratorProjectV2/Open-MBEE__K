
package test

// Original state machine.

Event[T](bound:Int) {
  name : String
  arguments: List[T]  

  staySimple{arguments.length <= bound}
}

SM[S,E : Event[Int]] {            
  type Transition = S * E * S

  states : Set[S]
  events : Set[E]
  transitions : Set[Transition]
  initial : S
  final : Set[S]
    
  initOk {initial isin states}

  finalOk{final subset states}

  statesDef {
    forall s : states :-
      exists e : events, s_ : states :- 
        (
          (s,e,s_) isin transitions
          or
          (s_,e,s) isin transitions
        )
  }

  eventsDef {
    forall e : events :-
      exists s1, s2 : states :- (s1,e,s2) isin transitions
  }

  valid(eventList:List[E]) =
    exists stateList: List[S] :-
      stateList.length = eventList.length + 1
      and
      (forall i : {0 .. eventList.length - 1} :- 
        let 
          event = eventList(i),
          state1 = stateList(i),
          state2 = stateList(i+1)
        in
          (state1,event,state2) isin transitions
      )
      and
      stateList(0) = initial
      and
      stateList.last isin final
}

A {
  a : List[Int] = [1,2,3]
  
  b : Map[Int,Int] = {1 -> 10, 2 -> 20, 3 -> 30}

  c : Set[Int] = {1,2,3}
}
