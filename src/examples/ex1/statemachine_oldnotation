
package test

--------------------
State machines in K:
--------------------

StateMachine {      
  type State = Integer
  type Event = String
  type Trans = State * Event * State

  states : Set[State]
  events : Set[Event]
  transitions : Set[Transition]
  initial : State

  // --- Reachability judgment: ---

  Reach(s:State):Boolean = 
    s = initial or 
      exists s_ : State, e : Event :- Reach(s_) and  (s_,e,s) isin transitions

  // --- Dead states: ---

  DeadState(s:State):Boolean =
    ! exists s2 : State, e : Event :- (s,e,s2) isin transitions

  // --- Initial states must be "defined": ---
 
  initial isin states

  // --- Transitions must be over "defined" states / events: ---
  
  forall (src,e,dst) : transitions :- src isin states & e isin events & dst isin states
  
  // --- The state machine must be deterministic: ---

  forall src : states, e : events, dst1,dst2 : states :-
    (src,e,dst1) isin states and (src,e,dst2) isin states => dst1 = dst2  
    
  // --- All states should be reachable: ---

  forall s : states :- Reach(s)
}

// ---------------------
// A state machine in K:
// ---------------------

Machine extends StateMachine {
  s1 : State = 1
  s2 : State = 2
  s3 : State = 3
  s4 : State = 4
  s5 : State = 5

  eThink  : Event = "think"
  eDesign : Event = "design"
  eCode   : Event = "code"

  states = {s1, s2, s3, s4, s5}
  events = {eThink, eDesign, eCode}

  initial = s1

  transitions = {
    (s1, eThink, s2),
    (s2, eDesign, s3),
    (s3, eCode, s1),
    (s4, eCode, s5)
  }
} 